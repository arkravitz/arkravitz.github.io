<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Dr. Hakyll's Blog</title>
        <link></link>
        <description><![CDATA[Dr. Hakyll's blog]]></description>
        <atom:link href="/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 09 Jun 2015 00:00:00 UT</lastBuildDate>
        <item>
    <title>"Category Theory For Haskell Part 1"</title>
    <link>/posts/2015-06-09-category-theory-for-haskell.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    "Category Theory For Haskell Part 1"
  </h2>
  <p class="blog-post-meta">
    Posted on 2015-06-09
    
  </p>
  <p>I’m learning Haskell right now and when I started had quite a hard time understanding all of the hullabaloo about Haskell and category theory. I mean, what the hell is a functor, and what does it have to do with me learning to program better. It turns out that category theory is actually quite simple, albeit abstract.</p>
<p>The whole idea behind category theory boils down to having a group of objects, and morphisms (or ways to get between those objects). In Haskell, the category we’re interested in is Haskell types, and the morphisms are just the functions between those types. For example:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">greaterThan4 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>
greaterThan4 x <span class="fu">=</span> x <span class="fu">&gt;</span> <span class="dv">4</span></code></pre></div>
<p>This is a morphism between the Int object (or type) and the Bool object (or type). Note that this isn’t the haskelliest way to write that function, nor is it a function that does anything remotely useful, but it’s useful for understanding functions in haskell. That’s all well and good, but what if you have a type that contains another type, or something like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Maybe</span> a <span class="fu">=</span> <span class="dt">Full</span> a <span class="fu">|</span> <span class="dt">Nothing</span></code></pre></div>
<p>In Haskell, lower-case character in a datatype (here we use “a”), means that it can be any type. The above construction defines the “Maybe” datatype with 2 constructors or actual values that type can have: a Nothing (which is sometimes used for error handling) or a “Full a” which is used to say that something is actually there. For now, let’s assume we set “a” to be the type Int:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="fu">=</span> <span class="dt">Full</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Nothing</span></code></pre></div>
<p>Okay, so this “object” is not quite an integer, but it’s also a type that depends on some other type. In Haskell we would say it has kind (* -&gt; *), meaning that it takes a type and returns a new type. Cool, let’s see Maybe in action:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">intToMaybe ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span>
intToMaybe x <span class="fu">=</span> <span class="kw">case</span> x <span class="kw">of</span>
  <span class="dv">0</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span>
  otherwise <span class="ot">-&gt;</span> <span class="dt">Full</span> x</code></pre></div>
<p>This function just returns a Nothing if the x passed in is 0 and a “Full x” if the x passed in is anything else. Sweet, we just defined a new object in the haskell category of types, and you didn’t even know it! (In actuality, this type is already defined in the Prelude, which is the thing that is imported by default in the language, but it was fun nonetheless).</p>
<p>Okay, now say we’ve written some pretty sweet functions that work on integers, one of them being:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">addOne ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
addOne x <span class="fu">=</span> <span class="dv">1</span> <span class="fu">+</span> x</code></pre></div>
<p>Sweet function right? Well, say we have a whole library of these functions. We want to apply this function to anything of type “Maybe Int” because we worked so hard to define it. Well addOne (Full 1) seems impossible because (Full 1) has the type (Maybe Int), and not Int. We can’t apply the function! But can’t we take the value inside and apply it there? What about applying addOne to a Nothing? Well, let’s define a new function that can do that.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">addOneMaybe ::</span> (<span class="dt">Maybe</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> (<span class="dt">Maybe</span> <span class="dt">Int</span>)
addOneMaybe x <span class="fu">=</span> <span class="kw">case</span> x <span class="kw">of</span>
  <span class="dt">Full</span> x <span class="ot">-&gt;</span> <span class="dt">Full</span> (addOne x)
  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></code></pre></div>
<p>WUT? We just rewrote a whole bunch of code to apply our function to our new type. Shouldn’t there be an easier way? Well, in fact there is:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap addOne (<span class="dt">Full</span> <span class="dv">1</span>) <span class="co">-- returns Full 2</span></code></pre></div>
<p>What’s that fmap thing and how did it work its magic. Well, let’s first look at the type of fmap in ghci (haskell’s interactive repl).</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">λ<span class="fu">:</span> <span class="fu">:</span>t fmap
fmap<span class="ot"> ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</code></pre></div>
<p>Huh? What’s that Functor thing? Let’s ignore that for now and just look at what fmap does. It takes a function from any type “a” to any type “b”. It then takes in an “f a”, which in out case is a “Maybe a”, and returns a “Maybe b” (a maybe containing the type b). Cool, so it’s a function that looks like it takes the value “inside” of the “f” datatype applies the function you gave it as the first argument. Neato! This is exactly what we wanted. fmap in our case resolves to this type:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">fmap<span class="ot"> ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></code></pre></div>
<p>We’re just applying the function to the value inside of Maybe! That’s it. Now guess what, that’s all a functor does. It takes a morphism (or function) in one category, in our case (Int -&gt; Int) and applies it to something in another category, in our case (Maybe Int). All you have to do to get this wonderful functionality is implement fmap, which in haskell is easy for Maybe:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Maybe</span> <span class="kw">where</span>
  fmap f (<span class="dt">Just</span> x) <span class="fu">=</span> <span class="dt">Just</span> (f x)
  fmap _ <span class="dt">Nothing</span>  <span class="fu">=</span> <span class="dt">Nothing</span></code></pre></div>
<p>Wahoo! We know what a functor is, and I avoided using the term functor the entire time. Wonderful isn’t it. Apply a function to something inside a typeclass, while still maintaining that the value and the “wrapper” are different classes i.e. “Maybe Int” is not the same type as “Int”. Next time we’ll talk about applicative functors and their power. A few more examples of functors are shown below for completeness.</p>
<p>The tree functor:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Tree</span> <span class="kw">where</span>
  fmap f (<span class="dt">Leaf</span> x)       <span class="fu">=</span> <span class="dt">Leaf</span>   (f x)
  fmap f (<span class="dt">Branch</span> t1 t2) <span class="fu">=</span> <span class="dt">Branch</span> (fmap f t1) (fmap f t2)</code></pre></div>
<p>The list functor:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span>  <span class="dt">Functor</span> []  <span class="kw">where</span>
    fmap <span class="fu">=</span> map
    <span class="kw">where</span>
      map _ [] <span class="fu">=</span> []  
      map f (x<span class="fu">:</span>xs) <span class="fu">=</span> f x <span class="fu">:</span> map f xs  </code></pre></div>
<p>See you next time!</p>
</div>
]]></description>
    <pubDate>Tue, 09 Jun 2015 00:00:00 UT</pubDate>
    <guid>/posts/2015-06-09-category-theory-for-haskell.html</guid>
    <dc:creator>Dr. Hakyll</dc:creator>
</item>
<item>
    <title>"Category Theory for Haskell Part 2"</title>
    <link>/posts/2015-06-09-category-theory-for-haskell-part-2.html</link>
    <description><![CDATA[<div class="blog-post">
  <h2 class="blog-post-title">
    "Category Theory for Haskell Part 2"
  </h2>
  <p class="blog-post-meta">
    Posted on 2015-06-09
    
  </p>
  <p>Okay, so last time we talked about functors without you even knowing it. This time I’m going to introduce another idea and then tell you what it is when I’m already done explaining it (some people may already know what I’m talking about).</p>
<p>Okay, so we may get a little bit abstract this time, but bear with me. Everyone reading this probably knows about the group of positive integers. Now consider the addition operation. Addition is associative and has an “identity element”, 0. Identity element just means if we take any number and add 0, we get the number back.</p>
<p>Because people in category theory are annoying and have their own lingo for everything, they call groups like Integers and Addition Monoids. A monoid is just a category with a single object (in our case a set of integers), a way of combining elements in the set such that (a * b) * c = a * (b * c) (note that * is just some operation, not multiplication), and the set contains an element such that a * ident = a, where ident is the identity element in the group.</p>
<p>Back to addition, we have the numbers 0 through infinity.We know the only thing in the integer set is an integer, check. We know addition is associative, so check there. We also know that anything added to 0 is just the original thing, check, check, check! We have a monoid!</p>
<p>In Haskell defining a set under some operation to be a monoid requires you to instantiate these functions:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Monoid</span> a <span class="kw">where</span>
<span class="ot">  mempty ::</span> a
<span class="ot">  mappend ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a
<span class="ot">  mconcat ::</span> [a] <span class="ot">-&gt;</span> a</code></pre></div>
<p>The implementation for addition is the following:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Integer</span> <span class="kw">where</span>
  mempty <span class="fu">=</span> <span class="dv">0</span>
  mappend x y <span class="fu">=</span> x <span class="fu">+</span> y
  mconcat ints <span class="fu">=</span> fmap (<span class="fu">+</span>) ints</code></pre></div>
<p>We just implemented our first monoid. Exciting, isn’t it?</p>
<p>For lists, the implementation is the following:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">Monoid</span> [a] <span class="kw">where</span>  
    mempty <span class="fu">=</span> []  
    mappend <span class="fu">=</span> (<span class="fu">++</span>)  </code></pre></div>
<p>Note that mconcat is implemented in terms of mempty and mappend so we don’t even have to write it! Wahoo!</p>
<p>If we convert our thinking over to category theory land, a monoid is defined as a 3-tuple <span class="math inline">\((M, \cdot, e)\)</span>, where M is the single set, <span class="math inline">\(\cdot\)</span> is our associative operation, and e is the identity element. We can write out the types of M, <span class="math inline">\(\cdot\)</span> and e like so:</p>
<p>\[ M \text{ is a set} \\ \cdot : M \cdot M \rightarrow M \\ e : 1 \rightarrow M \]</p>
<p>The 1 -&gt; M just means that e is the unit value in the category.</p>
<p>Again, these types have to satisfy the following:</p>
<p>\[ \forall x, y, z \in M. \space x \cdot (y \cdot z) = (x \cdot y) z \\ \forall x \in M. \space e \cdot x = x = x \cdot e \]</p>
<p>Cool, so monoids aren’t so bad. But then a question arises. Let’s say we have a type inside another type, like the maybe we looked at before:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">f ::</span> a <span class="ot">-&gt;</span> (<span class="dt">Maybe</span> a)
f <span class="dv">0</span> <span class="fu">=</span> <span class="dt">Nothing</span>
f x <span class="fu">=</span> <span class="dt">Full</span> x</code></pre></div>
<p>Okay that’s fine. It’s a stupid function that looks like it does nothing. And it does, but what’s interesting about it is if we try to apply f to something twice:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">f (f <span class="dv">5</span>) <span class="fu">=</span> f (<span class="dt">Full</span> <span class="dv">5</span>) <span class="co">-- ERROR!!!!!</span></code></pre></div>
<p>We can’t compose this function because we’re trying to apply the function again to a type that’s not an Int in this case. Well, what if we pretend for a second we have the same operations that monoids have, just for a second. So that means we have:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">join <span class="dt">Full</span> (<span class="dt">Full</span> x) <span class="fu">=</span> <span class="dt">Full</span> x
<span class="co">-- and</span>
(<span class="dt">Full</span> x) <span class="fu">*</span> (<span class="dt">Full</span> y) <span class="fu">=</span> <span class="dt">Full</span> (x<span class="fu">*</span>y)
<span class="co">-- and</span>
pure x <span class="fu">=</span> <span class="dt">Full</span> x</code></pre></div>
<p>That’s not necessarily legal haskell, but the point is, Maybe is a monoid! Cool, so what does that get us? Let’s try to invent some way of letting us do composition with maybe:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">g <span class="fu">&lt;=&lt;</span> f <span class="fu">=</span> \x <span class="ot">-&gt;</span> join ((fmap g) (f x))</code></pre></div>
<p>Note that anything that we can do this with already is a Functor (something talked about in the previous post), we we can call fmap on these functions. Let’s break down what happens when we call (g &lt;=&lt; f) using the function f defined earlier:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(f <span class="fu">&lt;=&lt;</span> f) <span class="dv">5</span> <span class="fu">=</span> join ((fmap g) (<span class="dt">Full</span> <span class="dv">5</span>)) <span class="fu">=</span> join (<span class="dt">Full</span> <span class="dt">Full</span> <span class="dv">5</span>) <span class="fu">=</span> <span class="dt">Full</span> <span class="dv">5</span></code></pre></div>
<p>Success!!!!! We’ve successfully redefined a monad! Yes, that’s the scary word I’ve been avoiding. We’ve defined how to compose functions that output “wrapped” values. That’s pretty neat, but how is that useful? Well, for example, some functions return the type IO String. Let’s see a simple example:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>
<span class="kw">import </span><span class="dt">System.Environment</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> (\x <span class="ot">-&gt;</span> putStrLn (<span class="st">&quot;Hello &quot;</span> (x <span class="fu">!!</span> <span class="dv">0</span>))) <span class="fu">&lt;=&lt;</span> getArgs</code></pre></div>
<p>In haskell, the syntax \x -&gt; … defines an unnamed function. The notation comes from lambda calculus, which you shouldn’t worry about, but just know if you squint enough and say “lambda” really loudly when you look at \, you’ll see what I mean. What we’ve done here is defined a way of composing two functions that output some wrapped value. Pretty neat! We kept our pure functional programming style, while being able to have some effect happen in the program.</p>
<p>I’m actively rewriting these posts because I’m working on my writing. I know a lot of it is confusing now, but think of it as a placeholder for more to come. Hope you enjoy the draft!</p>
</div>
]]></description>
    <pubDate>Tue, 09 Jun 2015 00:00:00 UT</pubDate>
    <guid>/posts/2015-06-09-category-theory-for-haskell-part-2.html</guid>
    <dc:creator>Dr. Hakyll</dc:creator>
</item>

    </channel>
</rss>
